<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>YOLOv7 (下) - 訓練自己的圖片集</title>
    <url>/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我們上次學會了怎麼使用預設的YOLOv7設置來偵測圖片，但各位同學一定會有「阿可是我想偵測我自己想要的東西欸，我才不想用預設的」的想法。</p>
<p>小樺同學就是抱有這個想法，所以直接買了一個攝像頭擺在家門口，想在房間裡就能夠知道說，等一下進家門的是爸爸、媽媽、還是其他人。</p>
<p>而茉莉花同學則發現說，預設的YOLOv7沒有辦法正確判斷出她想要的車車照片。</p>
<p>基於這些想法，我們這次來看看如何訓練自己的圖片集，並偵測出自己想要的酷東西。</p>
<h1 id="不囉嗦，直接先看範例結果"><a href="#不囉嗦，直接先看範例結果" class="headerlink" title="不囉嗦，直接先看範例結果"></a>不囉嗦，直接先看範例結果</h1><p>以下訓練資料皆來自<a href="https://public.roboflow.com/">robow公開資料集</a></p>
<ol>
<li><p>有無戴口罩(2 classes)</p>
 <img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result1.png" class="">

 <img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result2.png" class="">
</li>
<li><p>找出文件上的手寫簽名(1 class)</p>
 <img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result3.png" class="">

 <img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result4.png" class=""></li>
</ol>
<h1 id="所以該怎麼訓練呢？"><a href="#所以該怎麼訓練呢？" class="headerlink" title="所以該怎麼訓練呢？"></a>所以該怎麼訓練呢？</h1><h2 id="1-下載YOLOv7並安裝相關套件"><a href="#1-下載YOLOv7並安裝相關套件" class="headerlink" title="1. 下載YOLOv7並安裝相關套件"></a>1. 下載YOLOv7並安裝相關套件</h2><blockquote>
<p>可參考 <a href="https://github.com/WongKinYiu/yolov7">https://github.com/WongKinYiu/yolov7</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!git clone https://github.com/WongKinYiu/yolov7</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="built_in">cd</span> yolov7</span></span><br><span class="line">!pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下載完後的資料夾會有這麼多東西，在下面我有列出一些比較重要的資料夾及文件的用處</p>
</blockquote>
<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result5.png" class="">

<ul>
<li>cfg：存放訓練所需的網路結構yaml文件</li>
<li>data：存放訓練過程中超參數與訓練相關data的yaml文件</li>
<li>models：存放的是定義網路結構的相關python檔案和匯出模型部署所需的程式碼</li>
<li>runs：存放訓練和測試的權重文件和相關信息</li>
<li>utils：存放一些程式碼運行中必備的程式碼</li>
<li>detect.py：用於偵測及測試的腳本</li>
<li>requirement.txt：訓練與測試所需下載的函式庫</li>
<li>train.py：用於開啟訓練的腳本</li>
</ul>
<h2 id="2-準備yolo格式數據集"><a href="#2-準備yolo格式數據集" class="headerlink" title="2. 準備yolo格式數據集"></a>2. 準備yolo格式數據集</h2><blockquote>
<p>當你有了自己準備的圖片後，我們必須在圖片裡框出你想要的東西(aka 圖片標註)，然後將這些圖片以及標註好的結果變成yolo格式，至於怎麼標註及該用什麼工具我們留到下次說~<br>YOLOv7模型的輸入需要使用符合yolo格式的數據集，那什麼是yolo格式?長什麼樣呢?<br>下面這兩張圖就是yolo格式的結構，每一張圖片(.jpg&#x2F;.png&#x2F;…等等)都會對應到一個相同檔名的文字檔(.txt)，而文字檔裡面就是我們標註的內容。</p>
</blockquote>
<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result6.png" class="">

<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result7.png" class="">

<blockquote>
<p>標註的內容會有5個值，由左至右分別代表：類別、偵測框中心所在x軸座標、偵測框中心所在y軸座標、偵測框寬度比例、偵測框高度比例。<br>下面為示意圖，左邊的帥哥有戴口罩，所以標註內容第一個數字為1(類別)，後面為偵測框的訊息(我們將口罩框出來的位置及大小)。<br>而右邊的情侶也都有口罩，若一張圖片內有多個想標註的物品，則在標註檔(.txt)內往下新增及可，順序不影響。</p>
</blockquote>
<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result8.png" class="">

<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result9.png" class="">

<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result10.png" class="">

<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result11.png" class="">

<blockquote>
<p>這邊強烈建議將這份yolo格式數據集放到YOLOv7檔案夾底下，因為放在其他地方時，當模型在抓取路徑時可能會有權限的問題。<br>有了符合這樣的yolo格式數據集後，我們就可以利用這數據集來訓練出自己想要的內容。</p>
</blockquote>
<h2 id="3-下載訓練權重"><a href="#3-下載訓練權重" class="headerlink" title="3. 下載訓練權重"></a>3. 下載訓練權重</h2><blockquote>
<p>這邊使用的訓練權重是yolov7_training.pt，更多可參考 <a href="https://github.com/WongKinYiu/yolov7/releases">YOLOv7 inference code</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7_training.pt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我們上次直接偵測圖片時使用的是yolov7.pt，他是已經完全訓練好的權重檔，適合直接用於物件檢測，無需進行額外的訓練；<br>而yolov7_training.pt是專門為了fine-tune或從頭開始訓練而設計的，使用yolov7_training.pt可以對自己的數據集進行訓練。</p>
</blockquote>
<h2 id="4-新增2個yaml文件"><a href="#4-新增2個yaml文件" class="headerlink" title="4. 新增2個yaml文件"></a>4. 新增2個yaml文件</h2><ol>
<li><p>原地複製貼上<code>data</code>資料夾裡的coco.yaml並更名，舉例：mask.yaml</p>
<ol>
<li><p>將1~6行註記或刪除，他這裡是下載coco的圖片集，但我們不需要</p>
</li>
<li><p>更改train、val路徑，分別為：<code>yolov7/yolo格式數據集/train/images</code>、<code>yolov7/yolo格式數據集/valid/images</code></p>
<blockquote>
<p>這裡放的皆是圖片(.jpg)的路徑，模型會吃這些路徑的圖片來做訓練及驗證，可能有些同學會問說那那些標註的檔案(.txt)不用放嗎?<br> 當模型在訓練時，它會自動尋找與每個圖片(.jpg)同名的標註檔(.txt)來獲取標註資訊，如果找不到該圖片(.jpg)所對應的標註檔(.txt)，該圖片將被忽略或是導致錯誤。</p>
</blockquote>
</li>
<li><p>test可有可無</p>
</li>
<li><p>更改nc為你圖片標記的類別數</p>
</li>
<li><p>更改names為你圖片標記的類別名</p>
</li>
</ol>
 <img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result12.png" class="">
</li>
<li><p>原地複製貼上<code>cfg/training</code>資料夾裡的yolov7.yaml並更名，舉例：yolov7_mask.yaml</p>
<ol>
<li>更改nc為你圖片標記的類別數</li>
</ol>
 <img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result13.png" class=""></li>
</ol>
<h2 id="5-開始訓練"><a href="#5-開始訓練" class="headerlink" title="5. 開始訓練"></a>5. 開始訓練</h2><blockquote>
<p>註：在YOLOv7中並沒有提供早停(early stopping)的機制，需要的話需自行改寫。<br>early stopping：如果模型在持續訓練了n個epoch後效果未能提升，就讓模型提早停止訓練。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!python train.py --weights yolov7_training.pt --data data/mask.yaml --cfg cfg/training/yolov7_mask.yaml --epochs 100 --name 你的保存項目名稱_訓練</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下圖為開始訓練時的樣子，我們稍微介紹幾個出現在上面但可能沒見過的指標。更詳細的內容請參考最下方的「可參考的網站-2」。<br>box：偵測框的loss平均值，越小代表偵測框越準<br>obj：目標偵測的loss平均值，越小代表目標偵測越準<br>cls：分類的loss平均值越小代表分類越準。若為1類則cls會為0</p>
</blockquote>
<img src="/2024/03/24/YOLOv7%20(%E4%B8%8B)%20-%20%E8%A8%93%E7%B7%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9C%96%E7%89%87%E9%9B%86/result14.png" class="">

<blockquote>
<p>訓練常用參數</p>
</blockquote>
<ul>
<li>weights：權重設置</li>
<li>data：測試資料來源</li>
<li>epochs：訓練輪數(預設300)</li>
<li>bach-size：bach大小(預設16)</li>
<li>name：保存項目名稱，訓練完後會保存在<code>runs/train</code>底下</li>
</ul>
<blockquote>
<p>訓練時，可以透過tensorboard視覺化模型的權重或loss的趨勢等等來判斷模型訓練得好不好。步驟：</p>
</blockquote>
<ol>
<li>將目錄切換至 <code>runs/train/你的保存項目名稱_訓練</code></li>
<li>執行指令 <code>tensorboard --logdir runs/train</code></li>
<li>使用瀏覽器瀏覽 <code>http://localhost:6006/</code></li>
</ol>
<h2 id="6-圖片偵測"><a href="#6-圖片偵測" class="headerlink" title="6. 圖片偵測"></a>6. 圖片偵測</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!python detect.py --weights runs/train/你的保存項目名稱_訓練weights/best.pt --source 剛剛roboflow載的圖片集/test/images --save-txt --save-conf --conf-thres 0.07 --name 你的保存項目名稱_偵測</span><br></pre></td></tr></table></figure>

<blockquote>
<p>偵測常用參數</p>
</blockquote>
<ul>
<li>weights：權重設置</li>
<li>source：欲偵測的圖片路徑</li>
<li>save-txt：儲存偵測結果至txt</li>
<li>save-conf：儲存可信度至txt</li>
<li>classes：指定偵測yaml裡的類別</li>
<li>conf-thres：可信度閥值(預設為0.25)</li>
<li>name：保存項目名，偵測完後會保存在<code>runs/detect</code>底下</li>
</ul>
<blockquote>
<p>通常這裡使用的weights為best.pt，訓練過後模型預設會保存以下權重</p>
</blockquote>
<ul>
<li>best.pt: 訓練過程中在驗證集上表現最好的權重</li>
<li>last.pt: 最後一個epoch訓練的權重</li>
<li>預設每25個epoch會儲存一次權重</li>
<li>預設最後5個epoch皆會儲存權重</li>
</ul>
<h1 id="可參考的網站"><a href="#可參考的網站" class="headerlink" title="可參考的網站"></a>可參考的網站</h1><ol>
<li><a href="https://zhuanlan.zhihu.com/p/609775144">手把手調參最新YOLOv7模型推理部分 - 最新版本（一）</a></li>
<li><a href="https://blog.csdn.net/u012254599/article/details/128443417">YOLOv7模型訓練结果分析以及如何評估YOLOv7模型訓練的效果</a></li>
</ol>
<h1 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h1><blockquote>
<p>現在中研院團隊已經發表了最新版本YOLOv9，有興趣的朋朋可以看看這篇報導</p>
</blockquote>
<p><a href="https://www.ithome.com.tw/news/161569">AI趨勢周報第245期：YOLOv9來了！2大巧思克服深度學習資訊損失難題 | iThome</a></p>
]]></content>
      <categories>
        <category>電腦視覺</category>
      </categories>
      <tags>
        <tag>YOLO</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLOv7 (上) - 教你如何直接偵測圖片</title>
    <url>/2024/03/23/YOLOv7%20(%E4%B8%8A)%20-%20%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E5%81%B5%E6%B8%AC%E5%9C%96%E7%89%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假如在一項專案中，前端會有各式各樣的照片，例如會出現車、報價單、大頭貼等等，而茉莉花同學主要是想關注在有車的照片上並剔除雜訊，想知道有什麼方法可以判斷出哪些照片可以使用。因此我們想到可以使用物件偵測模型，用此方法可以做到照片分類的需求，也能計算出車子占照片的比例。</p>
<p>YOLO物件偵測，簡單來說，就是一種讓電腦能夠快速地識別出一張圖片中的物體和它們的位置的技術。YOLO的全名是”You Only Look Once”，意思是電腦只需要看一眼圖片，就能完成物件的影像辨識和定位。</p>
<p>（科普小時間：YOLO的另一個全名是”You Only Live Once”，意思是人生只活一次，鼓勵人們即使冒著生命危險也要享受人生。）</p>
<h1 id="偵測結果"><a href="#偵測結果" class="headerlink" title="偵測結果"></a>偵測結果</h1><p>我們直接使用YOLOv7官方訓練好的權重來偵測圖片，總共偵測出4 persons, 1 bicycle, 4 cars, 1 truck, 1 handbag, 2 surfboards, 3 bottles, 2 chairs, 1 dining table, 1 cell phone</p>
<img src="/2024/03/23/YOLOv7%20(%E4%B8%8A)%20-%20%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E5%81%B5%E6%B8%AC%E5%9C%96%E7%89%87/result1.png" class="">

<h1 id="YOLO使用步驟"><a href="#YOLO使用步驟" class="headerlink" title="YOLO使用步驟"></a>YOLO使用步驟</h1><h2 id="1-下載yolov7並安裝相關套件"><a href="#1-下載yolov7並安裝相關套件" class="headerlink" title="1. 下載yolov7並安裝相關套件"></a>1. 下載yolov7並安裝相關套件</h2><p>可參考 <a href="https://github.com/WongKinYiu/yolov7">https://github.com/WongKinYiu/yolov7</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!git clone https://github.com/WongKinYiu/yolov7</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="built_in">cd</span> yolov7</span></span><br><span class="line">!pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>下載完後的資料夾會有這麼多東西，在下面我有列出一些比較重要的資料夾及文件的用處</p>
<img src="/2024/03/23/YOLOv7%20(%E4%B8%8A)%20-%20%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E5%81%B5%E6%B8%AC%E5%9C%96%E7%89%87/result2.png" class="">

<ul>
<li>cfg：存放訓練所需的網路結構yaml文件</li>
<li>data：存放訓練過程中超參數與訓練相關data的yaml文件</li>
<li>models：存放的是定義網路結構的相關python檔案和匯出模型部署所需的程式碼</li>
<li>runs：存放訓練和測試的權重文件和相關信息</li>
<li>utils：存放一些程式碼運行中必備的程式碼</li>
<li>detect.py：用於偵測及測試的腳本</li>
<li>requirement.txt：訓練與測試所需下載的函式庫</li>
<li>train.py：用於開啟訓練的腳本</li>
</ul>
<h2 id="2-下載權重"><a href="#2-下載權重" class="headerlink" title="2. 下載權重"></a>2. 下載權重</h2><p><a href="https://github.com/WongKinYiu/yolov7/releases">https://github.com/WongKinYiu/yolov7/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt</span><br></pre></td></tr></table></figure>

<h2 id="3-執行圖像偵測"><a href="#3-執行圖像偵測" class="headerlink" title="3. 執行圖像偵測"></a>3. 執行圖像偵測</h2><blockquote>
<p>偵測常用參數</p>
</blockquote>
<ul>
<li>weights: 權重設置</li>
<li>source: 欲偵測的圖像路徑</li>
<li>save-txt: 儲存偵測結果至txt</li>
<li>save-conf: 儲存可信度至txt</li>
<li>classes: 指定偵測yaml裡的類別</li>
<li>name: 保存項目名</li>
<li>conf-thres: 可信度閥值(預設為0.25)</li>
</ul>
<blockquote>
<p>使用detect.py執行物件偵測，執行方式如下，偵測結果如最上方的圖</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不特別選擇classes</span></span><br><span class="line">!python detect.py --weights yolov7.pt --source picture_test/testtest.jpg --save-txt --save-conf --name 不特別選擇classes</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以在data&#x2F;coco.yaml裡看到有哪些類別(共有80項)</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># number of classes</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class names</span></span><br><span class="line"><span class="attr">names:</span> [ <span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;bicycle&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;motorcycle&#x27;</span>, <span class="string">&#x27;airplane&#x27;</span>, <span class="string">&#x27;bus&#x27;</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>, <span class="string">&#x27;boat&#x27;</span>, <span class="string">&#x27;traffic light&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;fire hydrant&#x27;</span>, <span class="string">&#x27;stop sign&#x27;</span>, <span class="string">&#x27;parking meter&#x27;</span>, <span class="string">&#x27;bench&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;bear&#x27;</span>, <span class="string">&#x27;zebra&#x27;</span>, <span class="string">&#x27;giraffe&#x27;</span>, <span class="string">&#x27;backpack&#x27;</span>, <span class="string">&#x27;umbrella&#x27;</span>, <span class="string">&#x27;handbag&#x27;</span>, <span class="string">&#x27;tie&#x27;</span>, <span class="string">&#x27;suitcase&#x27;</span>, <span class="string">&#x27;frisbee&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;skis&#x27;</span>, <span class="string">&#x27;snowboard&#x27;</span>, <span class="string">&#x27;sports ball&#x27;</span>, <span class="string">&#x27;kite&#x27;</span>, <span class="string">&#x27;baseball bat&#x27;</span>, <span class="string">&#x27;baseball glove&#x27;</span>, <span class="string">&#x27;skateboard&#x27;</span>, <span class="string">&#x27;surfboard&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;tennis racket&#x27;</span>, <span class="string">&#x27;bottle&#x27;</span>, <span class="string">&#x27;wine glass&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;fork&#x27;</span>, <span class="string">&#x27;knife&#x27;</span>, <span class="string">&#x27;spoon&#x27;</span>, <span class="string">&#x27;bowl&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;sandwich&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;broccoli&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>, <span class="string">&#x27;hot dog&#x27;</span>, <span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;donut&#x27;</span>, <span class="string">&#x27;cake&#x27;</span>, <span class="string">&#x27;chair&#x27;</span>, <span class="string">&#x27;couch&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;potted plant&#x27;</span>, <span class="string">&#x27;bed&#x27;</span>, <span class="string">&#x27;dining table&#x27;</span>, <span class="string">&#x27;toilet&#x27;</span>, <span class="string">&#x27;tv&#x27;</span>, <span class="string">&#x27;laptop&#x27;</span>, <span class="string">&#x27;mouse&#x27;</span>, <span class="string">&#x27;remote&#x27;</span>, <span class="string">&#x27;keyboard&#x27;</span>, <span class="string">&#x27;cell phone&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;microwave&#x27;</span>, <span class="string">&#x27;oven&#x27;</span>, <span class="string">&#x27;toaster&#x27;</span>, <span class="string">&#x27;sink&#x27;</span>, <span class="string">&#x27;refrigerator&#x27;</span>, <span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;clock&#x27;</span>, <span class="string">&#x27;vase&#x27;</span>, <span class="string">&#x27;scissors&#x27;</span>, <span class="string">&#x27;teddy bear&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;hair drier&#x27;</span>, <span class="string">&#x27;toothbrush&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果我們不想要偵測出這麼多東西，只想要特定的類別(person, car)，需在參數classes指定類別編號<br>總共偵測出4 persons, 4 cars</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">選擇classes</span></span><br><span class="line">!python detect.py --weights yolov7.pt --source picture_test/testtest.jpg --save-txt --save-conf --classes 0 2 --name 選擇classes</span><br></pre></td></tr></table></figure>

<img src="/2024/03/23/YOLOv7%20(%E4%B8%8A)%20-%20%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E5%81%B5%E6%B8%AC%E5%9C%96%E7%89%87/result3.png" class="">

<h2 id="4-結果判讀"><a href="#4-結果判讀" class="headerlink" title="4. 結果判讀"></a>4. 結果判讀</h2><blockquote>
<p>我們在執行detect.py時有額外加上兩個參數，分別是 save-txt 以及 save-conf，這兩個參數會將同一張圖片的偵測結果及可信度儲存至txt裡面，路徑為 runs&#x2F;detect&#x2F;你保存項目名稱&#x2F;labels&#x2F;圖片名.txt</p>
</blockquote>
<blockquote>
<p>輸出的偵測結果由左至右分別是<br>類別、偵測框中心所在x軸座標、偵測框中心所在y軸座標、偵測框寬度比例、偵測框高度比例、可信度</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>類別</th>
<th>偵測框中心所在x軸座標</th>
<th>偵測框中心所在y軸座標</th>
<th>偵測框寬度比例</th>
<th>偵測框高度比例</th>
<th>可信度</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0.691667</td>
<td>0.449107</td>
<td>0.061905</td>
<td>0.319643</td>
<td>0.476698</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>0.901190</td>
<td>0.518750</td>
<td>0.085714</td>
<td>0.058929</td>
<td>0.503899</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>0.095238</td>
<td>0.485714</td>
<td>0.040476</td>
<td>0.082143</td>
<td>0.516117</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>0.967262</td>
<td>0.531250</td>
<td>0.065476</td>
<td>0.155357</td>
<td>0.686354</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>0.814881</td>
<td>0.516964</td>
<td>0.055952</td>
<td>0.083929</td>
<td>0.755525</td>
</tr>
<tr>
<td>5</td>
<td>0</td>
<td>0.754762</td>
<td>0.558036</td>
<td>0.121429</td>
<td>0.712500</td>
<td>0.928456</td>
</tr>
<tr>
<td>6</td>
<td>0</td>
<td>0.652381</td>
<td>0.589286</td>
<td>0.114286</td>
<td>0.689286</td>
<td>0.937159</td>
</tr>
<tr>
<td>7</td>
<td>2</td>
<td>0.377381</td>
<td>0.607143</td>
<td>0.530952</td>
<td>0.475000</td>
<td>0.943151</td>
</tr>
</tbody></table>
<blockquote>
<p>將 偵測框寬度比例 乘上 偵測框高度比例 即為偵測物件佔圖像占比</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>偵測物件佔圖像占比</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0.019787</td>
</tr>
<tr>
<td>1</td>
<td>0.005051</td>
</tr>
<tr>
<td>2</td>
<td>0.003325</td>
</tr>
<tr>
<td>3</td>
<td>0.010172</td>
</tr>
<tr>
<td>4</td>
<td>0.004696</td>
</tr>
<tr>
<td>5</td>
<td>0.086518</td>
</tr>
<tr>
<td>6</td>
<td>0.078776</td>
</tr>
<tr>
<td>7</td>
<td>0.252202</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>電腦視覺</category>
      </categories>
      <tags>
        <tag>YOLO</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
